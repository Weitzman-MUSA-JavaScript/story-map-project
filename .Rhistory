),
West_African = c("african", "senegalese", "nigerian", "ghanaian",
"cameroonian", "ivorian", "jollof"
),
Southeast_Asian = c("cambodian", "amok", "lok_lak", "malaysian", "indonesian",
"kerala", "filipino"
)
)
# Define cuisine priority (from highest to lowest)
cuisine_priority <- c(
"Middle_Eastern", "South_Asian", "Thai", "West_African", "West_European", "East_European", "Ethiopian", "Southeast_Asian", "Vietnamese", "Japanese", "Korean", "Caribbean", "Mediterranean", "Latin_American", "Italian", "Mexican", "Chinese", "American"
)
# Function to assign primary cuisine based on keywords with prioritization
assign_primary_cuisine <- function(name, title, alias, cuisine_dict, priority_order) {
# Replace NA with empty string to avoid issues
name <- ifelse(is.na(name), "", name)
title <- ifelse(is.na(title), "", title)
alias <- ifelse(is.na(alias), "", alias)
# Combine name, title, alias for comprehensive search
combined_text <- paste(name, title, alias, sep = " ")
# Convert to lowercase for case-insensitive matching
combined_text <- tolower(combined_text)
# Iterate over each cuisine based on priority
for (cuisine in priority_order) {
keywords <- cuisine_dict[[cuisine]]
escaped_keywords <- str_replace_all(keywords, "([.|()\\^{}+$*?]|\\[|\\]|\\\\)", "\\\\\\1")
pattern <- paste0("\\b(", paste(escaped_keywords, collapse = "|"), ")\\b")
# Check if any keyword matches
if (grepl(pattern, combined_text, ignore.case = TRUE)) {
return(cuisine)
}
}
# If no match found, return NA
return("Unknown")
}
restaurants$cuisine <- mapply(
assign_primary_cuisine,
name = restaurants$name,
title = restaurants$title,
alias = restaurants$alias,
MoreArgs = list(cuisine_dict = cuisine_keywords, priority_order = cuisine_priority)
)
# View the first few entries with the assigned cuisine
restaurants %>%
st_drop_geometry() %>%
group_by(cuisine) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(15)
unclassified <- restaurants %>%
st_drop_geometry() %>%
filter(cuisine == "Unknown") %>%
select(name, title, alias)
italian <- restaurants %>% filter(cuisine == "Italian")
chinese <- restaurants %>% filter(cuisine == "Chinese")
mexican <- restaurants %>% filter(cuisine == "Mexican")
mideast <- restaurants %>% filter(cuisine == "Middle_Eastern")
# Remove fastfood
restaurants <- restauurants %>% filter(! name %in% c("mcdonald's", "popeye's", "kfc", "wendy's", "subway", "qdoba", "chipotle", "taco bell", "panda express", "chick fil-a"))
# Remove fastfood
restaurants <- restaurants %>% filter(! name %in% c("mcdonald's", "popeye's", "kfc", "wendy's", "subway", "qdoba", "chipotle", "taco bell", "panda express", "chick fil-a"))
italian <- restaurants %>% filter(cuisine == "Italian")
chinese <- restaurants %>% filter(cuisine == "Chinese")
mexican <- restaurants %>% filter(cuisine == "Mexican")
mideast <- restaurants %>% filter(cuisine == "Middle_Eastern")
View(chinese)
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
library(tidyverse)
library(sf)
library(mapview)
restaurants <- st_read("working data/restaurants_raw.geojson")
neighs <- st_read("working data/phl_neighs.geojson") %>%
st_transform(4326) %>%
select(MAPNAME, Shape_Area) %>%
st_make_valid()
neigh_coords <- neighs %>%
st_centroid() %>%
mutate(lon = st_coordinates(.)[,1], lat = st_coordinates(.)[,2])
tracts <- tigris::tracts(state = "PA", county = "Philadelphia", year = 2018) %>%
st_transform(4326) %>%
select(NAME)
# Updated and Refined Cuisine Keywords Dictionary
cuisine_keywords <- list(
American = c( "american", "tradamerican", "newamerican", "comfort",
"comfortfood", "diners", "pubs", "buffets", "steakhouses",
"gastropubs", "bar", "bars", "sportsbars", "salad", "bakeries",
"lounges", "brewpubs", "beergardens", "burger", "diner",
"cheesesteaks", "mac and cheese", "luncheonette", "chickenshop",
"chicken_wings", "hotdogs", "wings", "cheesesteak", "steaks",
"bbq", "barbecue", "barbeque", "smoked", "ribs", "pitmaster",
"dog", "dogs", "grill", "fastfood", "quickbites", "burgers",
"fries", "wraps", "pretzels", "grille", "coffee", "icecream",
"deli", "sandwiches", "kosher", "delis", "cafes", "brunch",
"hoagie", "brunch", "desserts", "pizza", "pizzeria",
"pasta", "lasagna", "dessert", "rotisserie", "sweetgreen",
"crown", "fried chicken", "cafe", "chicken", "donuts",
"chickenwings", "fastfood", "sports", "donuts", "vegan",
"soulfood", "southern", "soul", "cajun", "creole", "southern",
"soul", "cajun", "creole", "cajuncreole"
),
Italian = c("italian", "trattoria", "pastashops", "wine_bars",
"gelato", "risotto", "ristoranti", "ristorante", "giuseppe",
"trazza", "tuscan"
),
Chinese = c("chinese", "shanghainese", "cantonese", "dimsum", "szechuan",
"noodles", "hotpot", "panasian", "wok", "china", "garden",
"bubble tea", "boba", "dumpling", "wei", "meng", "dragon", "kung",
"canton", "mandarin", "oriental", "zheng", "xi", "jiang", "dian",
"ho", "lam", "yang", "zhong", "asian", "shing", "east", "pearl",
"palace", "chen", "sai", "yong", "hou", "hong", "zhang", "jun",
"golden", "kam", "dong", "sheng", "chung", "ping", "kon", "yi",
"wah", "lee", "nanchang", "lim", "yoo", "chan", "choing", "chuong",
"mui", "star", "lui", "yuan", "heng", "kee", "yue", "orient","ming"
),
Mexican = c("mexican", "tacos", "texmex", "burritos", "enchiladas", "salsa", "margaritas", "fajitas", "taqueria", "masa", "tex-mex"
),
Japanese = c("japanese", "sushi", "ramen", "teppanyaki", "izakaya", "sashimi", "hibachi", "omakase", "shabu", "osaka"
),
Korean = c("korean", "bibimbap", "kimchi", "bulgogi", "kbbq", "koreanbbq", "seung", "kim"
),
Middle_Eastern = c("mideastern", "middle_eastern", "halal", "shawarma",
"falafel", "kebab", "hummus", "arabic", "syrian", "sahara",
"afghan", "moroccan", "nile", "istanbul"
),
Mediterranean = c("mediterranean", "lebanese", "spanish", "iberian", "grille",
"mezze", "baklava", "greek", "gyro", "souvlaki", "moussaka",
"portuguese", "tapas"),
South_Asian = c("indian", "indpak", "curry", "tandoori", "naan", "masala",
"biriyani", "pakistani", "nepali", "himalayan"
),
Thai = c("thai", "pad_thai", "thaifusion"
),
Vietnamese = c("pho", "viet", "vietnamese", "banh_mi", "pho", "bun", "pho",
"springrolls", "trinh", "nguyen", "tran"),
Ethiopian = c("ethiopian", "injera", "doro_wot", "tibs"
),
Caribbean = c("caribbean", "jamaican", "trinidadian", "haitian", "puertorican",
"jerk", "dominican", "borinquen", "carribean"
),
West_European = c("french", "crepe", "bistro", "brasserie", "patisserie",
"volksfest", "brahaus", "moderneuropean", "european",
"german", "scandinavian", "brasseries", "british", "english",
"scottish", "irish", "welsh", "fish and chips",
"fish & chips", "pub", "finnigan", "dandelion"
),
East_European = c("russian", "uzbek", "ukrainian", "georgian", "ulfatlar",
"khachapuri", "khinkali", "plov", "lagman", "polish"
),
Latin_American = c("latin", "latinamerican", "nicaraguan", "salvadoran",
"brazilian", "colombian", "guatemalteco", "guadelupana",
"casa", "guadalupana", "cancun", "caldos", "restaurante",
"provocan", "de jesus", "honduran", "latinos", "venezuelan"
),
West_African = c("african", "senegalese", "nigerian", "ghanaian",
"cameroonian", "ivorian", "jollof"
),
Southeast_Asian = c("cambodian", "amok", "lok_lak", "malaysian", "indonesian",
"kerala", "filipino"
)
)
# Define cuisine priority (from highest to lowest)
cuisine_priority <- c(
"Middle_Eastern", "South_Asian", "Thai", "West_African", "West_European", "East_European", "Ethiopian", "Southeast_Asian", "Vietnamese", "Japanese", "Korean", "Caribbean", "Mediterranean", "Latin_American", "Italian", "American", "Mexican", "Chinese"
)
# Function to assign primary cuisine based on keywords with prioritization
assign_primary_cuisine <- function(name, title, alias, cuisine_dict, priority_order) {
# Replace NA with empty string to avoid issues
name <- ifelse(is.na(name), "", name)
title <- ifelse(is.na(title), "", title)
alias <- ifelse(is.na(alias), "", alias)
# Combine name, title, alias for comprehensive search
combined_text <- paste(name, title, alias, sep = " ")
# Convert to lowercase for case-insensitive matching
combined_text <- tolower(combined_text)
# Iterate over each cuisine based on priority
for (cuisine in priority_order) {
keywords <- cuisine_dict[[cuisine]]
escaped_keywords <- str_replace_all(keywords, "([.|()\\^{}+$*?]|\\[|\\]|\\\\)", "\\\\\\1")
pattern <- paste0("\\b(", paste(escaped_keywords, collapse = "|"), ")\\b")
# Check if any keyword matches
if (grepl(pattern, combined_text, ignore.case = TRUE)) {
return(cuisine)
}
}
# If no match found, return NA
return("Unknown")
}
restaurants$cuisine <- mapply(
assign_primary_cuisine,
name = restaurants$name,
title = restaurants$title,
alias = restaurants$alias,
MoreArgs = list(cuisine_dict = cuisine_keywords, priority_order = cuisine_priority)
)
# View the first few entries with the assigned cuisine
restaurants %>%
st_drop_geometry() %>%
group_by(cuisine) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(15)
# Remove fastfood
restaurants <- restaurants %>% filter(! name %in% c("mcdonald's", "popeye's", "kfc", "wendy's", "subway", "qdoba", "chipotle", "taco bell", "panda express", "chick fil-a"))
italian <- restaurants %>% filter(cuisine == "Italian")
chinese <- restaurants %>% filter(cuisine == "Chinese")
mexican <- restaurants %>% filter(cuisine == "Mexican")
mideast <- restaurants %>% filter(cuisine == "Middle_Eastern")
View(chinese)
View(mexican)
View(mexican)
mapview(mexican)
american <- restaurants %>% filter(cuisine == "American")
View(american)
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
library(tidyverse)
library(sf)
library(mapview)
restaurants <- st_read("working data/restaurants_raw.geojson")
neighs <- st_read("working data/phl_neighs.geojson") %>%
st_transform(4326) %>%
select(MAPNAME, Shape_Area) %>%
st_make_valid()
neigh_coords <- neighs %>%
st_centroid() %>%
mutate(lon = st_coordinates(.)[,1], lat = st_coordinates(.)[,2])
tracts <- tigris::tracts(state = "PA", county = "Philadelphia", year = 2018) %>%
st_transform(4326) %>%
select(NAME)
# Updated and Refined Cuisine Keywords Dictionary
cuisine_keywords <- list(
American = c( "american", "tradamerican", "newamerican", "comfort",
"comfortfood", "diners", "pubs", "buffets", "steakhouses",
"gastropubs", "bars", "sportsbars", "salad", "bakeries",
"lounges", "brewpubs", "beergardens", "burger", "diner",
"cheesesteaks", "mac and cheese", "luncheonette", "chickenshop",
"chicken_wings", "hotdogs", "wings", "cheesesteak", "steaks",
"bbq", "barbecue", "barbeque", "smoked", "ribs", "pitmaster",
"dog", "dogs", "fastfood", "quickbites", "burgers",
"fries", "wraps", "pretzels", "grille", "coffee", "icecream",
"deli", "sandwiches", "kosher", "delis", "cafes", "brunch",
"hoagie", "brunch", "desserts", "pizza", "pizzeria",
"pasta", "lasagna", "dessert", "rotisserie", "sweetgreen",
"crown", "fried chicken", "cafe", "chicken", "donuts",
"chickenwings", "fastfood", "sports", "donuts", "vegan",
"soulfood", "southern", "soul", "cajun", "creole", "southern",
"soul", "cajun", "creole", "cajuncreole"
),
Italian = c("italian", "trattoria", "pastashops", "wine_bars",
"gelato", "risotto", "ristoranti", "ristorante", "giuseppe",
"trazza", "tuscan"
),
Chinese = c("chinese", "shanghainese", "cantonese", "dimsum", "szechuan",
"noodles", "hotpot", "panasian", "wok", "china", "garden",
"bubble tea", "boba", "dumpling", "wei", "meng", "dragon", "kung",
"canton", "mandarin", "oriental", "zheng", "xi", "jiang", "dian",
"ho", "lam", "yang", "zhong", "asian", "shing", "east", "pearl",
"palace", "chen", "sai", "yong", "hou", "hong", "zhang", "jun",
"golden", "kam", "dong", "sheng", "chung", "ping", "kon", "yi",
"wah", "lee", "nanchang", "lim", "yoo", "chan", "choing", "chuong",
"mui", "star", "lui", "yuan", "heng", "kee", "yue", "orient","ming"
),
Mexican = c("mexican", "tacos", "texmex", "burritos", "enchiladas", "salsa", "margaritas", "fajitas", "taqueria", "masa", "tex-mex"
),
Japanese = c("japanese", "sushi", "ramen", "teppanyaki", "izakaya", "sashimi", "hibachi", "omakase", "shabu", "osaka"
),
Korean = c("korean", "bibimbap", "kimchi", "bulgogi", "kbbq", "koreanbbq", "seung", "kim"
),
Middle_Eastern = c("mideastern", "middle_eastern", "halal", "shawarma",
"falafel", "kebab", "hummus", "arabic", "syrian", "sahara",
"afghan", "moroccan", "nile", "istanbul"
),
Mediterranean = c("mediterranean", "lebanese", "spanish", "iberian", "grille",
"mezze", "baklava", "greek", "gyro", "souvlaki", "moussaka",
"portuguese", "tapas"),
South_Asian = c("indian", "indpak", "curry", "tandoori", "naan", "masala",
"biriyani", "pakistani", "nepali", "himalayan"
),
Thai = c("thai", "pad_thai", "thaifusion"
),
Vietnamese = c("pho", "viet", "vietnamese", "banh_mi", "pho", "bun", "pho",
"springrolls", "trinh", "nguyen", "tran"),
Ethiopian = c("ethiopian", "injera", "doro_wot", "tibs"
),
Caribbean = c("caribbean", "jamaican", "trinidadian", "haitian", "puertorican",
"jerk", "dominican", "borinquen", "carribean"
),
West_European = c("french", "crepe", "bistro", "brasserie", "patisserie",
"volksfest", "brahaus", "moderneuropean", "european",
"german", "scandinavian", "brasseries", "british", "english",
"scottish", "irish", "welsh", "fish and chips",
"fish & chips", "pub", "finnigan", "dandelion"
),
East_European = c("russian", "uzbek", "ukrainian", "georgian", "ulfatlar",
"khachapuri", "khinkali", "plov", "lagman", "polish"
),
Latin_American = c("latin", "latinamerican", "nicaraguan", "salvadoran",
"brazilian", "colombian", "guatemalteco", "guadelupana",
"casa", "guadalupana", "cancun", "caldos", "restaurante",
"provocan", "de jesus", "honduran", "latinos", "venezuelan"
),
West_African = c("african", "senegalese", "nigerian", "ghanaian",
"cameroonian", "ivorian", "jollof"
),
Southeast_Asian = c("cambodian", "amok", "lok_lak", "malaysian", "indonesian",
"kerala", "filipino"
)
)
# Define cuisine priority (from highest to lowest)
cuisine_priority <- c(
"Middle_Eastern", "South_Asian", "Thai", "West_African", "West_European", "East_European", "Ethiopian", "Southeast_Asian", "Vietnamese", "Japanese", "Korean", "Caribbean", "Mediterranean", "Latin_American", "Italian", "Mexican", "American", "Chinese"
)
# Function to assign primary cuisine based on keywords with prioritization
assign_primary_cuisine <- function(name, title, alias, cuisine_dict, priority_order) {
# Replace NA with empty string to avoid issues
name <- ifelse(is.na(name), "", name)
title <- ifelse(is.na(title), "", title)
alias <- ifelse(is.na(alias), "", alias)
# Combine name, title, alias for comprehensive search
combined_text <- paste(name, title, alias, sep = " ")
# Convert to lowercase for case-insensitive matching
combined_text <- tolower(combined_text)
# Iterate over each cuisine based on priority
for (cuisine in priority_order) {
keywords <- cuisine_dict[[cuisine]]
escaped_keywords <- str_replace_all(keywords, "([.|()\\^{}+$*?]|\\[|\\]|\\\\)", "\\\\\\1")
pattern <- paste0("\\b(", paste(escaped_keywords, collapse = "|"), ")\\b")
# Check if any keyword matches
if (grepl(pattern, combined_text, ignore.case = TRUE)) {
return(cuisine)
}
}
# If no match found, return NA
return("Unknown")
}
restaurants$cuisine <- mapply(
assign_primary_cuisine,
name = restaurants$name,
title = restaurants$title,
alias = restaurants$alias,
MoreArgs = list(cuisine_dict = cuisine_keywords, priority_order = cuisine_priority)
)
# View the first few entries with the assigned cuisine
restaurants %>%
st_drop_geometry() %>%
group_by(cuisine) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(15)
# Remove fastfood
restaurants <- restaurants %>% filter(! name %in% c("mcdonald's", "popeye's", "kfc", "wendy's", "subway", "qdoba", "chipotle", "taco bell", "panda express", "chick fil-a"))
italian <- restaurants %>% filter(cuisine == "Italian")
chinese <- restaurants %>% filter(cuisine == "Chinese")
mexican <- restaurants %>% filter(cuisine == "Mexican")
mideast <- restaurants %>% filter(cuisine == "Middle_Eastern")
american <- restaurants %>% filter(cuisine == "American")
cuisine_neigh <- st_intersection(restaurants, neighs) %>%
st_drop_geometry() %>%
left_join(neighs, by = "MAPNAME") %>%
group_by(cuisine, MAPNAME) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(MAPNAME) %>%
mutate(pct = 100 * count / sum(count)) %>%
ungroup() %>%
left_join(neighs, by = "MAPNAME") %>%
st_as_sf()
cuisine_tract <- st_intersection(restaurants, tracts) %>%
st_drop_geometry() %>%
left_join(tracts, by = "NAME") %>%
group_by(cuisine, NAME) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(NAME) %>%
mutate(pct = 100 * count / sum(count)) %>%
ungroup() %>%
left_join(tracts, by = "NAME") %>%
st_as_sf()
top_cuisine_neigh <- cuisine_neigh %>%
filter(! cuisine %in% exclude) %>%
group_by(MAPNAME) %>%
slice_max(order_by = pct)
exclude <- c("American", "Seafood", "Unknown")
top_cuisine_neigh <- cuisine_neigh %>%
filter(! cuisine %in% exclude) %>%
group_by(MAPNAME) %>%
slice_max(order_by = pct)
top_cuisine_tract <- cuisine_tract %>%
filter(! cuisine %in% exclude) %>%
group_by(NAME) %>%
slice_max(order_by = pct)
spruce_hill_rest <- neighs %>%
filter(MAPNAME %in% c("Spruce Hill")) %>%
st_intersection(restaurants) %>%
st_as_sf()
st_write(top_cuisine_neigh, "data/top_cuisine_neigh.geojson", driver = "GeoJSON")
st_write(top_cuisine_tract, "data/top_cuisine_tract.geojson", driver = "GeoJSON")
st_write(spruce_hill_rest, "data/spruce_hill_restaurants.geojson", driver = "GeoJSON")
st_write(restaurants, "data/restaurants_final.geojson", driver = "GeoJSON")
for (cuisine in unique(restaurants$cuisine)) {
cuisine_name <- tolower(gsub(" ", "_", cuisine))
cuisine_data <- restaurants %>%
filter(cuisine == cuisine)
st_write(cuisine_data, paste0("data/", cuisine_name, ".json"), driver = "GeoJSON")
}
east_asian <- restaurants %>% filter(cuisine %in% c("Chinese", "Japanese", "Korean"))
View(east_asian)
east_asian <- restaurants %>% filter(cuisine %in% c("Chinese", "Japanese", "Korean"))
latin_am <- restaurants %>% filter(cuisine %in% c("Latin_American", "Mexican"))
mid_east <- restaurants %>% filter(cuisine %in% c("Middle_Eastern"))
caribbean <- restaurants %>% filter(cuisine %in% c("Caribbean"))
se_asian <- restaurants %>% filter(cuisine %in% c("Southeast_Asian", "Vietnamese", "Thai"))
south_asian <- restaurants %>% filter(cuisine %in% c("South_Asian"))
european <- restaurants %>% filter(cuisine %in% c("Italian", "Mediterranean", "West_European", "East_European"))
african <- restaurants %>% filter(cuisine %in% c("Ethiopian", "West_African"))
# Cuisine groupings
east_asian <- restaurants %>% filter(cuisine %in% c("Chinese", "Japanese", "Korean"))
latin_am <- restaurants %>% filter(cuisine %in% c("Latin_American", "Mexican"))
mid_east <- restaurants %>% filter(cuisine %in% c("Middle_Eastern"))
mediterranean <- restaurants %>% filter(cuisine %in% c("Mediterranean"))
caribbean <- restaurants %>% filter(cuisine %in% c("Caribbean"))
se_asian <- restaurants %>% filter(cuisine %in% c("Southeast_Asian", "Vietnamese", "Thai"))
south_asian <- restaurants %>% filter(cuisine %in% c("South_Asian"))
european <- restaurants %>% filter(cuisine %in% c("Italian", "West_European", "East_European"))
african <- restaurants %>% filter(cuisine %in% c("Ethiopian", "West_African"))
# Cuisine groupings
east_asian <- restaurants %>% filter(cuisine %in% c("Chinese", "Japanese", "Korean"))
latin_am <- restaurants %>% filter(cuisine %in% c("Latin_American", "Mexican"))
mid_east <- restaurants %>% filter(cuisine %in% c("Middle_Eastern"))
mediterranean <- restaurants %>% filter(cuisine %in% c("Mediterranean"))
caribbean <- restaurants %>% filter(cuisine %in% c("Caribbean"))
se_asian <- restaurants %>% filter(cuisine %in% c("Southeast_Asian", "Vietnamese", "Thai"))
south_asian <- restaurants %>% filter(cuisine %in% c("South_Asian"))
european <- restaurants %>% filter(cuisine %in% c("Italian", "West_European", "East_European"))
african <- restaurants %>% filter(cuisine %in% c("Ethiopian", "West_African"))
# Write cuisine groupings to geojson
for (cuisine_group in list(east_asian, latin_am, mid_east, mediterranean, caribbean, se_asian, south_asian, european, african)) {
st_write(cuisine_group, paste0("data/", tolower(cuisine_group$cuisine[1]), ".json"), driver = "GeoJSON")
}
east_asian <- restaurants %>% filter(cuisine %in% c("Chinese", "Japanese", "Korean"))
latin_am <- restaurants %>% filter(cuisine %in% c("Latin_American", "Mexican"))
mid_east <- restaurants %>% filter(cuisine %in% c("Middle_Eastern"))
mediterranean <- restaurants %>% filter(cuisine %in% c("Mediterranean"))
caribbean <- restaurants %>% filter(cuisine %in% c("Caribbean"))
se_asian <- restaurants %>% filter(cuisine %in% c("Southeast_Asian", "Vietnamese", "Thai"))
south_asian <- restaurants %>% filter(cuisine %in% c("South_Asian"))
european <- restaurants %>% filter(cuisine %in% c("Italian", "West_European", "East_European"))
african <- restaurants %>% filter(cuisine %in% c("Ethiopian", "West_African"))
# Write cuisine groupings to geojson
for (cuisine_group in list(east_asian, latin_am, mid_east, mediterranean, caribbean, se_asian, south_asian, european, african)) {
st_write(cuisine_group, paste0("data/", tolower(cuisine_group), ".json"), driver = "GeoJSON")
}
east_asian <- restaurants %>% filter(cuisine %in% c("Chinese", "Japanese", "Korean"))
latin_am <- restaurants %>% filter(cuisine %in% c("Latin_American", "Mexican"))
mid_east <- restaurants %>% filter(cuisine %in% c("Middle_Eastern"))
mediterranean <- restaurants %>% filter(cuisine %in% c("Mediterranean"))
caribbean <- restaurants %>% filter(cuisine %in% c("Caribbean"))
se_asian <- restaurants %>% filter(cuisine %in% c("Southeast_Asian", "Vietnamese", "Thai"))
south_asian <- restaurants %>% filter(cuisine %in% c("South_Asian"))
european <- restaurants %>% filter(cuisine %in% c("Italian", "West_European", "East_European"))
african <- restaurants %>% filter(cuisine %in% c("Ethiopian", "West_African"))
# Write cuisine groupings to geojson
for (cuisine_group in list(east_asian, latin_am, mid_east, mediterranean, caribbean, se_asian, south_asian, european, african)) {
cuisine_group_name <- deparse(substitute(cuisine_group))
st_write(cuisine_group, paste0("data/", tolower(cuisine_group_name), ".json"), driver = "GeoJSON")
}
# Cuisine groupings
east_asian <- restaurants %>% filter(cuisine %in% c("Chinese", "Japanese", "Korean"))
latin_am <- restaurants %>% filter(cuisine %in% c("Latin_American", "Mexican"))
mid_east <- restaurants %>% filter(cuisine %in% c("Middle_Eastern"))
mediterranean <- restaurants %>% filter(cuisine %in% c("Mediterranean"))
caribbean <- restaurants %>% filter(cuisine %in% c("Caribbean"))
se_asian <- restaurants %>% filter(cuisine %in% c("Southeast_Asian", "Vietnamese", "Thai"))
south_asian <- restaurants %>% filter(cuisine %in% c("South_Asian"))
european <- restaurants %>% filter(cuisine %in% c("Italian", "West_European", "East_European"))
african <- restaurants %>% filter(cuisine %in% c("Ethiopian", "West_African"))
# Create a named list where the names are the strings you want for the file names
cuisine_groups <- list(
east_asian = east_asian,
latin_am = latin_am,
mid_east = mid_east,
mediterranean = mediterranean,
caribbean = caribbean,
se_asian = se_asian,
south_asian = south_asian,
european = european,
african = african
)
# Loop through the named list
for (cuisine_name in names(cuisine_groups)) {
cuisine_group <- cuisine_groups[[cuisine_name]]
# Write the data to a GeoJSON file using the name of the list
st_write(cuisine_group, paste0("data/", cuisine_name, ".json"), driver = "GeoJSON")
}
neighs
spruce_hill
spruce_hill_rest
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = TRUE
)
library(tidyverse)
library(ggplot2)
library(sf)
library(mapview)
parks <- st_read("https://opendata.arcgis.com/datasets/d52445160ab14380a673e5849203eb64_0.geojson")
mapview(parks, col.regions = "chartreuse3", map.types = "CartoDB.DarkMatter")
ggplot() +
geom_sf(data = parks, fill = "chartreuse4", color = "transparent") +
labs(title = "Philadelphia Park System, 2023") +
theme_void()

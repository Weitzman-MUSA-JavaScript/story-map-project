# Get the latitude and longitude for the zip code
lat <- zip_coords$lat[zipnum]
lon <- zip_coords$lon[zipnum]
zip_code <- zip_coords$ZCTA5CE20[zipnum]
# Fetch Yelp data for the zip code and store it in the list
offset_list[[i]][[as.character(zip_code)]] <- get_yelp("restaurant", lat, lon, offset)
zipnum <- zipnum + 1 #iterate zipnum each loop
}
offset <- offset + 50
}
get_yelp = function(category, lat, lon, offset_num) {
# args are category of business, zipcode, and number to offset by
queryString = list(
latitude = lat,
longitude = lon,
# argument to be filled
term = category,
# argument to be filled
sort_by = "distance",
# radius
radius = 1609.34, # 1 mile in meters
# sort by dist
limit = 50,
# 50 is the max for yelp fusion api, any higher and it won't work
offset = offset_num # argument to be filled
)
# use "GET" verb to request information from url
response <- VERB(
"GET",
url,
query = queryString,
add_headers('Authorization' = 'Bearer hVIEeA6P5U7zyjMISG5Z6XTxKr8o6HVjT58cs419ulWYT49b-5JPLpbJfwEzSLgHcKZUz4SlT7fBG5NaHoKX9MKe_PM02Tw4_dO-EEr4tHNIZkd04Y8HV4NVPjpJZXYx'),
content_type("application/octet-stream"),
accept("application/json")
)
print("response received")
# turn the response into a json file
yelp.json = httr::content(response, "parsed", flatten = TRUE, simplify = TRUE)
print("yelp.json created")
# retrieve columns from json structure
biz.name = data.frame(yelp.json$businesses$name)
biz.lat = data.frame(yelp.json$businesses$coordinates.latitude)
biz.lon = data.frame(yelp.json$businesses$coordinates.longitude)
biz.rating = data.frame(yelp.json$businesses$rating)
biz.addr = data.frame(yelp.json$businesses$location.address1)
print("columns retrieved")
# bind the columns into one dataframe
yelp.df = cbind(biz.name, biz.rating, biz.addr, biz.lat, biz.lon)  %>%
as.data.frame()
colnames(yelp.df) <- c("name", "rating", "address", "lat", "lon")
print("columns renamed")
# add in category alias/title (this will give us cuisine information)
cuisine = yelp.json$businesses$categories
cuis.df <- map_dfr(cuisine, function(x) {
tibble(
alias = paste(x$alias, collapse = ", "),
title = paste(x$title, collapse = ", ")) %>%
as.data.frame()
})
print("cuisines retrieved")
yelp.df <- yelp.df %>%
cbind(cuis.df)
print("cuisines added")
# When creating an empty dataframe, use "" as default value
if(nrow(yelp.df) == 0) {
yelp.df <- data.frame(name="", rating=numeric(0), address="", lat=numeric(0), lon=numeric(0), alias = "", title = "", stringsAsFactors=FALSE)
}
return(yelp.df)
}
zip_coords <- zip_coords %>%
filter(ZCTA5CE20 %in% c(19139, 19103, 19104))
# Initialize a named list of empty dataframes
initialize_named_dfs <- function(zips) {
empty_df <- data.frame(name=character(0), rating=numeric(0),  address=character(0), lat=numeric(0), lon=numeric(0))
named_list <- lapply(zips, function(zip) empty_df)
names(named_list) <- zips
return(named_list)
}
biz_list_0 <- initialize_named_dfs(zip_list) # Initiate list of restaurant dataframes for each offset (since the query limit is 50, offset = 1 would return 51-100)
biz_list_1 <- initialize_named_dfs(zip_list) # 10 dfs x 50 restaurants each = a 500 restaurant sample per zip code
biz_list_2 <- initialize_named_dfs(zip_list)
biz_list_3 <- initialize_named_dfs(zip_list)
biz_list_4 <- initialize_named_dfs(zip_list)
biz_list_5 <- initialize_named_dfs(zip_list)
biz_list_6 <- initialize_named_dfs(zip_list)
biz_list_7 <- initialize_named_dfs(zip_list)
biz_list_8 <- initialize_named_dfs(zip_list)
biz_list_9 <- initialize_named_dfs(zip_list)
biz_list_10 <- initialize_named_dfs(zip_list)
biz_list_11 <- initialize_named_dfs(zip_list)
biz_list_12 <- initialize_named_dfs(zip_list)
biz_list_13 <- initialize_named_dfs(zip_list)
biz_list_14 <- initialize_named_dfs(zip_list)
biz_list_15 <- initialize_named_dfs(zip_list)
# master list to store the dataframes
offset_list <- list(biz_list_0,
biz_list_1,
biz_list_2,
biz_list_3,
biz_list_4,
biz_list_5,
biz_list_6,
biz_list_7,
biz_list_8,
biz_list_9,
biz_list_10,
biz_list_11,
biz_list_12,
biz_list_13,
biz_list_14,
biz_list_15)
# Loop through each offset (think of each offset as a page of results)
for (i in 1:length(zip_coords)) {
# initialize zipnum (this is so we know where we're at in the list of zips)
zipnum <- 1
# initialize offset (so we can pull page 1, then page 2, then page 3, etc)
offset <- i - 1
# Loop through each zip code
for (zip_code in zip_coords$ZCTA5CE20) {
print(paste("batch ", offset + 1, ", ", "zip", zipnum, ": ", zip_code, sep = ""))
# Get the latitude and longitude for the zip code
lat <- zip_coords$lat[zipnum]
lon <- zip_coords$lon[zipnum]
zip_code <- zip_coords$ZCTA5CE20[zipnum]
# Fetch Yelp data for the zip code and store it in the list
offset_list[[i]][[as.character(zip_code)]] <- get_yelp("restaurant", lat, lon, offset)
zipnum <- zipnum + 1 #iterate zipnum each loop
}
offset <- offset + 50
}
get_yelp = function(category, lat, lon, offset_num) {
# args are category of business, zipcode, and number to offset by
queryString = list(
latitude = lat,
longitude = lon,
# argument to be filled
term = category,
# argument to be filled
sort_by = "distance",
# radius
radius = 1609.34, # 1 mile in meters
# sort by dist
limit = 50,
# 50 is the max for yelp fusion api, any higher and it won't work
offset = offset_num # argument to be filled
)
# use "GET" verb to request information from url
response <- VERB(
"GET",
url,
query = queryString,
add_headers('Authorization' = 'Bearer hVIEeA6P5U7zyjMISG5Z6XTxKr8o6HVjT58cs419ulWYT49b-5JPLpbJfwEzSLgHcKZUz4SlT7fBG5NaHoKX9MKe_PM02Tw4_dO-EEr4tHNIZkd04Y8HV4NVPjpJZXYx'),
content_type("application/octet-stream"),
accept("application/json")
)
print("response received")
# turn the response into a json file
yelp.json = httr::content(response, "parsed", flatten = TRUE, simplify = TRUE)
print("yelp.json created")
# retrieve columns from json structure
biz.name = data.frame(yelp.json$businesses$name)
biz.lat = data.frame(yelp.json$businesses$coordinates.latitude)
biz.lon = data.frame(yelp.json$businesses$coordinates.longitude)
biz.rating = data.frame(yelp.json$businesses$rating)
biz.addr = data.frame(yelp.json$businesses$location.address1)
print("columns retrieved")
# bind the columns into one dataframe
yelp.df = cbind(biz.name, biz.rating, biz.addr, biz.lat, biz.lon)  %>%
as.data.frame()
colnames(yelp.df) <- c("name", "rating", "address", "lat", "lon")
print("columns renamed")
# add in category alias/title (this will give us cuisine information)
cuisine = yelp.json$businesses$categories
cuis.df <- map_dfr(cuisine, function(x) {
tibble(
alias = paste(x$alias, collapse = ", "),
title = paste(x$title, collapse = ", ")) %>%
as.data.frame()
})
print("cuisines retrieved")
# yelp.df <- yelp.df %>%
#   cbind(cuis.df)
print("listings:" + length(yelp.df) + "details:" + length(cuis.df))
print("cuisines added")
# When creating an empty dataframe, use "" as default value
if(nrow(yelp.df) == 0) {
yelp.df <- data.frame(name="", rating=numeric(0), address="", lat=numeric(0), lon=numeric(0), alias = "", title = "", stringsAsFactors=FALSE)
}
return(yelp.df)
}
zip_coords <- zip_coords %>%
filter(ZCTA5CE20 %in% c(19139, 19103, 19104))
# Initialize a named list of empty dataframes
initialize_named_dfs <- function(zips) {
empty_df <- data.frame(name=character(0), rating=numeric(0),  address=character(0), lat=numeric(0), lon=numeric(0))
named_list <- lapply(zips, function(zip) empty_df)
names(named_list) <- zips
return(named_list)
}
biz_list_0 <- initialize_named_dfs(zip_list) # Initiate list of restaurant dataframes for each offset (since the query limit is 50, offset = 1 would return 51-100)
biz_list_1 <- initialize_named_dfs(zip_list) # 10 dfs x 50 restaurants each = a 500 restaurant sample per zip code
biz_list_2 <- initialize_named_dfs(zip_list)
biz_list_3 <- initialize_named_dfs(zip_list)
biz_list_4 <- initialize_named_dfs(zip_list)
biz_list_5 <- initialize_named_dfs(zip_list)
biz_list_6 <- initialize_named_dfs(zip_list)
biz_list_7 <- initialize_named_dfs(zip_list)
biz_list_8 <- initialize_named_dfs(zip_list)
biz_list_9 <- initialize_named_dfs(zip_list)
biz_list_10 <- initialize_named_dfs(zip_list)
biz_list_11 <- initialize_named_dfs(zip_list)
biz_list_12 <- initialize_named_dfs(zip_list)
biz_list_13 <- initialize_named_dfs(zip_list)
biz_list_14 <- initialize_named_dfs(zip_list)
biz_list_15 <- initialize_named_dfs(zip_list)
# master list to store the dataframes
offset_list <- list(biz_list_0,
biz_list_1,
biz_list_2,
biz_list_3,
biz_list_4,
biz_list_5,
biz_list_6,
biz_list_7,
biz_list_8,
biz_list_9,
biz_list_10,
biz_list_11,
biz_list_12,
biz_list_13,
biz_list_14,
biz_list_15)
# Loop through each offset (think of each offset as a page of results)
for (i in 1:length(zip_coords)) {
# initialize zipnum (this is so we know where we're at in the list of zips)
zipnum <- 1
# initialize offset (so we can pull page 1, then page 2, then page 3, etc)
offset <- i - 1
# Loop through each zip code
for (zip_code in zip_coords$ZCTA5CE20) {
print(paste("batch ", offset + 1, ", ", "zip", zipnum, ": ", zip_code, sep = ""))
# Get the latitude and longitude for the zip code
lat <- zip_coords$lat[zipnum]
lon <- zip_coords$lon[zipnum]
zip_code <- zip_coords$ZCTA5CE20[zipnum]
# Fetch Yelp data for the zip code and store it in the list
offset_list[[i]][[as.character(zip_code)]] <- get_yelp("restaurant", lat, lon, offset)
zipnum <- zipnum + 1 #iterate zipnum each loop
}
offset <- offset + 50
}
get_yelp = function(category, lat, lon, offset_num) {
# args are category of business, zipcode, and number to offset by
queryString = list(
latitude = lat,
longitude = lon,
# argument to be filled
term = category,
# argument to be filled
sort_by = "distance",
# radius
radius = 1609.34, # 1 mile in meters
# sort by dist
limit = 50,
# 50 is the max for yelp fusion api, any higher and it won't work
offset = offset_num # argument to be filled
)
# use "GET" verb to request information from url
response <- VERB(
"GET",
url,
query = queryString,
add_headers('Authorization' = 'Bearer hVIEeA6P5U7zyjMISG5Z6XTxKr8o6HVjT58cs419ulWYT49b-5JPLpbJfwEzSLgHcKZUz4SlT7fBG5NaHoKX9MKe_PM02Tw4_dO-EEr4tHNIZkd04Y8HV4NVPjpJZXYx'),
content_type("application/octet-stream"),
accept("application/json")
)
print("response received")
# turn the response into a json file
yelp.json = httr::content(response, "parsed", flatten = TRUE, simplify = TRUE)
print("yelp.json created")
# retrieve columns from json structure
biz.name = data.frame(yelp.json$businesses$name)
biz.lat = data.frame(yelp.json$businesses$coordinates.latitude)
biz.lon = data.frame(yelp.json$businesses$coordinates.longitude)
biz.rating = data.frame(yelp.json$businesses$rating)
biz.addr = data.frame(yelp.json$businesses$location.address1)
print("columns retrieved")
# bind the columns into one dataframe
yelp.df = cbind(biz.name, biz.rating, biz.addr, biz.lat, biz.lon)  %>%
as.data.frame()
colnames(yelp.df) <- c("name", "rating", "address", "lat", "lon")
print("columns renamed")
# add in category alias/title (this will give us cuisine information)
cuisine = yelp.json$businesses$categories
print("listings:" + length(yelp.df) + "details:" + length(cuisine))
cuis.df <- map_dfr(cuisine, function(x) {
tibble(
alias = paste(x$alias, collapse = ", "),
title = paste(x$title, collapse = ", ")) %>%
as.data.frame()
})
print("cuisines retrieved")
yelp.df <- yelp.df %>%
cbind(cuis.df)
print("cuisines added")
# When creating an empty dataframe, use "" as default value
if(nrow(yelp.df) == 0) {
yelp.df <- data.frame(name="", rating=numeric(0), address="", lat=numeric(0), lon=numeric(0), alias = "", title = "", stringsAsFactors=FALSE)
}
return(yelp.df)
}
zip_coords <- zip_coords %>%
filter(ZCTA5CE20 %in% c(19139, 19103, 19104))
# Initialize a named list of empty dataframes
initialize_named_dfs <- function(zips) {
empty_df <- data.frame(name=character(0), rating=numeric(0),  address=character(0), lat=numeric(0), lon=numeric(0))
named_list <- lapply(zips, function(zip) empty_df)
names(named_list) <- zips
return(named_list)
}
biz_list_0 <- initialize_named_dfs(zip_list) # Initiate list of restaurant dataframes for each offset (since the query limit is 50, offset = 1 would return 51-100)
biz_list_1 <- initialize_named_dfs(zip_list) # 10 dfs x 50 restaurants each = a 500 restaurant sample per zip code
biz_list_2 <- initialize_named_dfs(zip_list)
biz_list_3 <- initialize_named_dfs(zip_list)
biz_list_4 <- initialize_named_dfs(zip_list)
biz_list_5 <- initialize_named_dfs(zip_list)
biz_list_6 <- initialize_named_dfs(zip_list)
biz_list_7 <- initialize_named_dfs(zip_list)
biz_list_8 <- initialize_named_dfs(zip_list)
biz_list_9 <- initialize_named_dfs(zip_list)
biz_list_10 <- initialize_named_dfs(zip_list)
biz_list_11 <- initialize_named_dfs(zip_list)
biz_list_12 <- initialize_named_dfs(zip_list)
biz_list_13 <- initialize_named_dfs(zip_list)
biz_list_14 <- initialize_named_dfs(zip_list)
biz_list_15 <- initialize_named_dfs(zip_list)
# master list to store the dataframes
offset_list <- list(biz_list_0,
biz_list_1,
biz_list_2,
biz_list_3,
biz_list_4,
biz_list_5,
biz_list_6,
biz_list_7,
biz_list_8,
biz_list_9,
biz_list_10,
biz_list_11,
biz_list_12,
biz_list_13,
biz_list_14,
biz_list_15)
# Loop through each offset (think of each offset as a page of results)
for (i in 1:length(zip_coords)) {
# initialize zipnum (this is so we know where we're at in the list of zips)
zipnum <- 1
# initialize offset (so we can pull page 1, then page 2, then page 3, etc)
offset <- i - 1
# Loop through each zip code
for (zip_code in zip_coords$ZCTA5CE20) {
print(paste("batch ", offset + 1, ", ", "zip", zipnum, ": ", zip_code, sep = ""))
# Get the latitude and longitude for the zip code
lat <- zip_coords$lat[zipnum]
lon <- zip_coords$lon[zipnum]
zip_code <- zip_coords$ZCTA5CE20[zipnum]
# Fetch Yelp data for the zip code and store it in the list
offset_list[[i]][[as.character(zip_code)]] <- get_yelp("restaurant", lat, lon, offset)
zipnum <- zipnum + 1 #iterate zipnum each loop
}
offset <- offset + 50
}
get_yelp = function(category, lat, lon, offset_num) {
# args are category of business, zipcode, and number to offset by
queryString = list(
latitude = lat,
longitude = lon,
# argument to be filled
term = category,
# argument to be filled
sort_by = "distance",
# radius
radius = 1609.34, # 1 mile in meters
# sort by dist
limit = 50,
# 50 is the max for yelp fusion api, any higher and it won't work
offset = offset_num # argument to be filled
)
# use "GET" verb to request information from url
response <- VERB(
"GET",
url,
query = queryString,
add_headers('Authorization' = 'Bearer hVIEeA6P5U7zyjMISG5Z6XTxKr8o6HVjT58cs419ulWYT49b-5JPLpbJfwEzSLgHcKZUz4SlT7fBG5NaHoKX9MKe_PM02Tw4_dO-EEr4tHNIZkd04Y8HV4NVPjpJZXYx'),
content_type("application/octet-stream"),
accept("application/json")
)
print("response received")
# turn the response into a json file
yelp.json = httr::content(response, "parsed", flatten = TRUE, simplify = TRUE)
print("yelp.json created")
# retrieve columns from json structure
biz.name = data.frame(yelp.json$businesses$name)
biz.lat = data.frame(yelp.json$businesses$coordinates.latitude)
biz.lon = data.frame(yelp.json$businesses$coordinates.longitude)
biz.rating = data.frame(yelp.json$businesses$rating)
biz.addr = data.frame(yelp.json$businesses$location.address1)
print("columns retrieved")
# bind the columns into one dataframe
yelp.df = cbind(biz.name, biz.rating, biz.addr, biz.lat, biz.lon)  %>%
as.data.frame()
colnames(yelp.df) <- c("name", "rating", "address", "lat", "lon")
print("columns renamed")
#
# # add in category alias/title (this will give us cuisine information)
cuisine = yelp.json$businesses$categories
#
#   print("listings:" + length(yelp.df) + "details:" + length(cuisine))
# cuis.df <- map_dfr(cuisine, function(x) {
#   tibble(
#     alias = paste(x$alias, collapse = ", "),
#     title = paste(x$title, collapse = ", ")) %>%
#     as.data.frame()
# })
#
# print("cuisines retrieved")
#
# yelp.df <- yelp.df %>%
#   cbind(cuis.df)
#
# print("cuisines added")
#
# # When creating an empty dataframe, use "" as default value
# if(nrow(yelp.df) == 0) {
#   yelp.df <- data.frame(name="", rating=numeric(0), address="", lat=numeric(0), lon=numeric(0), alias = "", title = "", stringsAsFactors=FALSE)
# }
return(cuisine)
}
zip_coords <- zip_coords %>%
filter(ZCTA5CE20 %in% c(19139, 19103, 19104))
# Initialize a named list of empty dataframes
initialize_named_dfs <- function(zips) {
empty_df <- data.frame(name=character(0), rating=numeric(0),  address=character(0), lat=numeric(0), lon=numeric(0))
named_list <- lapply(zips, function(zip) empty_df)
names(named_list) <- zips
return(named_list)
}
biz_list_0 <- initialize_named_dfs(zip_list) # Initiate list of restaurant dataframes for each offset (since the query limit is 50, offset = 1 would return 51-100)
biz_list_1 <- initialize_named_dfs(zip_list) # 10 dfs x 50 restaurants each = a 500 restaurant sample per zip code
biz_list_2 <- initialize_named_dfs(zip_list)
biz_list_3 <- initialize_named_dfs(zip_list)
biz_list_4 <- initialize_named_dfs(zip_list)
biz_list_5 <- initialize_named_dfs(zip_list)
biz_list_6 <- initialize_named_dfs(zip_list)
biz_list_7 <- initialize_named_dfs(zip_list)
biz_list_8 <- initialize_named_dfs(zip_list)
biz_list_9 <- initialize_named_dfs(zip_list)
biz_list_10 <- initialize_named_dfs(zip_list)
biz_list_11 <- initialize_named_dfs(zip_list)
biz_list_12 <- initialize_named_dfs(zip_list)
biz_list_13 <- initialize_named_dfs(zip_list)
biz_list_14 <- initialize_named_dfs(zip_list)
biz_list_15 <- initialize_named_dfs(zip_list)
# master list to store the dataframes
offset_list <- list(biz_list_0,
biz_list_1,
biz_list_2,
biz_list_3,
biz_list_4,
biz_list_5,
biz_list_6,
biz_list_7,
biz_list_8,
biz_list_9,
biz_list_10,
biz_list_11,
biz_list_12,
biz_list_13,
biz_list_14,
biz_list_15)
# Loop through each offset (think of each offset as a page of results)
for (i in 1:length(zip_coords)) {
# initialize zipnum (this is so we know where we're at in the list of zips)
zipnum <- 1
# initialize offset (so we can pull page 1, then page 2, then page 3, etc)
offset <- i - 1
# Loop through each zip code
for (zip_code in zip_coords$ZCTA5CE20) {
print(paste("batch ", offset + 1, ", ", "zip", zipnum, ": ", zip_code, sep = ""))
# Get the latitude and longitude for the zip code
lat <- zip_coords$lat[zipnum]
lon <- zip_coords$lon[zipnum]
zip_code <- zip_coords$ZCTA5CE20[zipnum]
# Fetch Yelp data for the zip code and store it in the list
offset_list[[i]][[as.character(zip_code)]] <- get_yelp("restaurant", lat, lon, offset)
zipnum <- zipnum + 1 #iterate zipnum each loop
}
offset <- offset + 50
}
# Combine all dataframes into one dataframe and remove duplicates
restaurants <- map_dfr(offset_list, ~ bind_rows(.x)) %>%
unique() %>%
filter(!is.na(lat)) %>%
st_as_sf(crs = 4326, coords = c("lon", "lat")) %>%
st_crop(st_union(zcta)) %>%
filter(!is.na(title) | !is.na(alias)) %>%
mutate(
title = tolower(title),
alias = tolower(alias),
name = tolower(name)
)
View(offset_list)
